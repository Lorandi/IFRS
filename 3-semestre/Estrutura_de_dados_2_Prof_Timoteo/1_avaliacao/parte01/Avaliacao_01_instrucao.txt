Atividade 01 - Structs (2,0 Pontos)
Condições de conclusão

Considerando o código fonte "Avaliacao_01.cpp" e as variáveis locais:

int icodigo;
char esfera[16];
char solicitante[80];
char situacao[10];
char data[16];
char motivo[80];
Altere a estrutura de variáveis para utilizar uma struct (registro) chamada "dados" e defina o tipo 
com o nome de "DADOS". 

Para identificar o item 01 da Avaliação você deve identificar colando imediatamente acima do seu 
código alterado a seguinte linha:

"//****************Atividade 01********************** "

1,0 Ponto para criação da Struct .

1,0 Para definição do "typedef".




Atividade 02 - Alocação Dinâmica

Considerando o tipo de dados DADOS, agora você deve criar um ponteio chamado "solicitantes"  do tipo DADOS.
  O ponteiro deverá conter inicialmente 1000 posições. 

Altere o código existente para armazenar todos os dados lidos no bloco de memória apontando pelo "solicitantes". 

Faça um ajuste que a cada 999 linhas lidas do arquivo, seja realocado o ponteiro, reservando mais 1000 espaços 
de memória. 

Para identificar o item 02 da Avaliação você deve identificar colando imediatamente acima do seu código alterado
 a seguinte linha:

"//****************Atividade 02.1********************** "

1,0 Ponto para alocação correta de 1000 posições .

"//****************Atividade 02.2********************** "

2,0 Pontos para o processo de realocação de 1000 posições a cada 999 linhas lidas. 


Atividade 03 - Arquivos Binaria

Considerando os funções:  

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
Altere o  Programa para gerar um Arquivo Binário com os dados lidos (executar apenas uma vez. Pode estar
 comentado no final do programa).

Após gerar o arquivo de dados, altere a entrada para ler o novo arquivo binário.

O nome do arquivo binário deverá ser obrigatoriamente dados.bin. 

Identifique a gravação e a leitura do arquivo binário através (comente a leitura do arquivo ASCII - não apague.):

"//****************Atividade 03.1********************** "

1,0 Ponto para Geração do arquivo binário.

"//****************Atividade 03.2********************** "

1,0 Pontos para a leitura do arquivo binário. 


Atividade 04 - Busca Binaria

Considerando os parte do programa abaixo, referente a busca binária:  

int meio=0, esquerda = -1, direita = TAMANHO; 
   while (esquerda < direita-1) {  
      int meio = (esquerda + direita)/2;
      if (vetor[meio] < x) 
  esquerda = meio;
      else 
  direita = meio; 
   }

if (vetor[direita]==x)
    printf("Valor Localizado"); 
else
    printf("Valor NAO Localizado"); 

Implemente, após o carregamentos do arquivo,  uma função de busca binária, onde esta receberá 
como parâmetro o código a ser buscado e o ponteiro para os bloco de memória onde estão os dados. 

Como retorno, a função deverá retornar a posição de memória com os dados ou ZERO se não encontrar. 

Marque a chamada da função com. 

 
"//****************Atividade 04.1********************** "

1,0 Ponto para chamada e tratamento da função.

"//****************Atividade 04.2********************** "

1,0 Ponto para função.



Atividade 05 - Funcionamento
 
0,5 Ponto se o programa estiver compilando e rodando.

0,5 Ponto se estiver um menu de busca, e finalizar o programa quando informar o código Zero.